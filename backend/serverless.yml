service:
  name: serverless-diary-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    DIARY_TABLE: Diary-${self:provider.stage}
    ATTACHEMENTS_TABLE: Attachement-${self:provider.stage}
    DIARY_ID_INDEX: DiaryAttachementIdIndex-${self:provider.stage}
    CONNECTIONS_TABLE: Connections-${self:provider.stage}
    DIARY_S3_BUCKET: serverless-diarys-attachement-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
    AUTH_0_SECRET_FIELD: auth0Secret
    AUTH_0_SECRET: 0abj8-sSJbH6MaZKr3dOX2m82090x2ktWS_Ti643Mf-12uqNPiH4sFriqWR8zz_deFaowu

  iamRoleStatements:
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DIARY_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DIARY_TABLE}/index/${self:provider.environment.DIARY_ID_INDEX}
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.DIARY_S3_BUCKET}/*
   
    # - Effect: Allow
    #   Action:
    #     - secretsmanager:GetSecretValue
    #   Resource: !Ref Auth0Secret
    # - Effect: Allow
    #   Action:
    #     - kms:Decrypt
    #   Resource: !GetAtt KMSKey.Arn

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetDairies:
    handler: src/lambda/http/getDairies.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          
  # TODO: Configure this function
 # GetTodos:
  CreateDairy:
    handler: src/lambda/http/createDairy.handler
    events:
      - http:
          method: post
          path: todos
          authorizer: Auth
          

  # TODO: Configure this function
  UpdateDairy:
    handler: src/lambda/http/updateDairy.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          authorizer: Auth


  # TODO: Configure this function
  DeleteDairy:
    handler: src/lambda/http/deleteDairy.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          authorizer: Auth


  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          authorizer: Auth


resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    TODOItemsDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: dairyId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          # - AttributeName: dueDate
          #   AttributeType: S
          # - AttributeName: done
          #   AttributeType: B
          # - AttributeName: attachmentUrl
          #   AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: dairyId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DIARY_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.DIARY_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
    # TODO: Add any necessary AWS resources


    AttachmentsBucket:
      Type: AWS::S3::Bucket
    # DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.DIARY_S3_BUCKET}
        # NotificationConfiguration:
        #   TopicConfigurations:
        #     - Event: s3:ObjectCreated:Put
        #       Topic: !Ref ImagesTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.DIARY_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
